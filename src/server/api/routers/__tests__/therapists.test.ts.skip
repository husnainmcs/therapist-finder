import { describe, it, expect, beforeEach, vi } from "vitest";
import { createCallerFactory } from "@/server/api/root";
import { createTestContext, prismaMock } from "@/test/test-utils";

// Mock the database
vi.mock("~/server/db", () => ({
  prisma: prismaMock,
}));

describe("Therapist Router", () => {
  const createCaller = createCallerFactory();
  let caller: ReturnType<typeof createCaller>;

  beforeEach(() => {
    const ctx = createTestContext();
    caller = createCaller(ctx);
  });

  describe("getAll", () => {
    it("should return all therapists with no filters", async () => {
      // Mock data
      const mockTherapists = [
        {
          id: "1",
          name: "Dr. Sarah Ahmed",
          gender: "Female",
          city: "Karachi",
          experience_years: 10,
          fee_amount: 3000,
          fee_currency: "PKR",
          profile_url: "https://example.com/sarah",
          email: "sarah@example.com",
          phone: "03001234567",
          modes: "In-person; Virtual video-based",
          education: "PhD Clinical Psychology",
          experience: "Senior Psychologist at Mind Wellness Center",
          expertise: "Anxiety Disorders; Depression",
          about: "Experienced clinical psychologist",
          fees_raw: "Fee: Rs. 3000",
          emails_all: "sarah@example.com",
          createdAt: new Date(),
          updatedAt: new Date(),
        },
        {
          id: "2",
          name: "Dr. Ali Hassan",
          gender: "Male",
          city: "Lahore",
          experience_years: 7,
          fee_amount: 2500,
          fee_currency: "PKR",
          profile_url: "https://example.com/ali",
          email: "ali@example.com",
          phone: "03001234568",
          modes: "Virtual telephonic",
          education: "Masters in Psychology",
          experience: "Clinical Psychologist at Hospital",
          expertise: "Relationship Counseling; Stress Management",
          about: "Compassionate psychologist",
          fees_raw: "Fee: Rs. 2500",
          emails_all: "ali@example.com",
          createdAt: new Date(),
          updatedAt: new Date(),
        },
      ];

      // Mock Prisma response
      prismaMock.therapist.findMany.mockResolvedValue(mockTherapists);

      // Call the procedure
      const result = await caller.therapists.getAll({});

      // Assertions
      expect(prismaMock.therapist.findMany).toHaveBeenCalledWith({
        take: 13, // limit + 1 for cursor pagination
        cursor: undefined,
        where: {},
        orderBy: { name: "asc" },
      });

      expect(result.therapists).toHaveLength(2);
      expect(result.therapists[0]?.name).toBe("Dr. Sarah Ahmed");
      expect(result.therapists[1]?.name).toBe("Dr. Ali Hassan");
      expect(result.nextCursor).toBeUndefined();
    });

    it("should filter therapists by city", async () => {
      const mockTherapists = [
        {
          id: "1",
          name: "Dr. Sarah Ahmed",
          gender: "Female",
          city: "Karachi",
          experience_years: 10,
          fee_amount: 3000,
          fee_currency: "PKR",
          profile_url: "https://example.com/sarah",
          email: "sarah@example.com",
          phone: "03001234567",
          modes: "In-person; Virtual video-based",
          education: "PhD Clinical Psychology",
          experience: "Senior Psychologist",
          expertise: "Anxiety Disorders",
          about: "Experienced psychologist",
          fees_raw: "Fee: Rs. 3000",
          emails_all: "sarah@example.com",
          createdAt: new Date(),
          updatedAt: new Date(),
        },
      ];

      prismaMock.therapist.findMany.mockResolvedValue(mockTherapists);

      const result = await caller.therapists.getAll({
        cities: ["Karachi"],
      });

      expect(prismaMock.therapist.findMany).toHaveBeenCalledWith({
        take: 13,
        cursor: undefined,
        where: {
          city: { in: ["Karachi"] },
        },
        orderBy: { name: "asc" },
      });

      expect(result.therapists).toHaveLength(1);
      expect(result.therapists[0]?.city).toBe("Karachi");
    });

    it("should filter therapists by gender", async () => {
      const mockTherapists = [
        {
          id: "1",
          name: "Dr. Sarah Ahmed",
          gender: "Female",
          city: "Karachi",
          experience_years: 10,
          fee_amount: 3000,
          fee_currency: "PKR",
          profile_url: "https://example.com/sarah",
          email: "sarah@example.com",
          phone: "03001234567",
          modes: "In-person",
          education: "PhD",
          experience: "Senior Psychologist",
          expertise: "Anxiety",
          about: "Experienced",
          fees_raw: "Fee: Rs. 3000",
          emails_all: "sarah@example.com",
          createdAt: new Date(),
          updatedAt: new Date(),
        },
      ];

      prismaMock.therapist.findMany.mockResolvedValue(mockTherapists);

      const result = await caller.therapists.getAll({
        genders: ["Female"],
      });

      expect(prismaMock.therapist.findMany).toHaveBeenCalledWith({
        take: 13,
        cursor: undefined,
        where: {
          gender: { in: ["Female"] },
        },
        orderBy: { name: "asc" },
      });

      expect(result.therapists).toHaveLength(1);
      expect(result.therapists[0]?.gender).toBe("Female");
    });

    it("should filter therapists by experience range", async () => {
      const mockTherapists = [
        {
          id: "1",
          name: "Dr. Sarah Ahmed",
          gender: "Female",
          city: "Karachi",
          experience_years: 3,
          fee_amount: 3000,
          fee_currency: "PKR",
          profile_url: "https://example.com/sarah",
          email: "sarah@example.com",
          phone: "03001234567",
          modes: "In-person",
          education: "PhD",
          experience: "Psychologist",
          expertise: "Anxiety",
          about: "Experienced",
          fees_raw: "Fee: Rs. 3000",
          emails_all: "sarah@example.com",
          createdAt: new Date(),
          updatedAt: new Date(),
        },
      ];

      prismaMock.therapist.findMany.mockResolvedValue(mockTherapists);

      const result = await caller.therapists.getAll({
        experienceRanges: ["0-5"],
      });

      expect(prismaMock.therapist.findMany).toHaveBeenCalledWith({
        take: 13,
        cursor: undefined,
        where: {
          OR: [{ experience_years: { gte: 0, lt: 5 } }],
        },
        orderBy: { name: "asc" },
      });

      expect(result.therapists).toHaveLength(1);
      expect(result.therapists[0]?.experience_years).toBe(3);
    });

    it("should filter therapists by fee range", async () => {
      const mockTherapists = [
        {
          id: "1",
          name: "Dr. Sarah Ahmed",
          gender: "Female",
          city: "Karachi",
          experience_years: 10,
          fee_amount: 1500,
          fee_currency: "PKR",
          profile_url: "https://example.com/sarah",
          email: "sarah@example.com",
          phone: "03001234567",
          modes: "In-person",
          education: "PhD",
          experience: "Senior Psychologist",
          expertise: "Anxiety",
          about: "Experienced",
          fees_raw: "Fee: Rs. 1500",
          emails_all: "sarah@example.com",
          createdAt: new Date(),
          updatedAt: new Date(),
        },
      ];

      prismaMock.therapist.findMany.mockResolvedValue(mockTherapists);

      const result = await caller.therapists.getAll({
        feeRanges: ["<2000"],
      });

      expect(prismaMock.therapist.findMany).toHaveBeenCalledWith({
        take: 13,
        cursor: undefined,
        where: {
          OR: [{ fee_amount: { lt: 2000 } }],
        },
        orderBy: { name: "asc" },
      });

      expect(result.therapists).toHaveLength(1);
      expect(result.therapists[0]?.fee_amount).toBe(1500);
    });

    it("should search therapists across multiple fields", async () => {
      const mockTherapists = [
        {
          id: "1",
          name: "Dr. Sarah Ahmed",
          gender: "Female",
          city: "Karachi",
          experience_years: 10,
          fee_amount: 3000,
          fee_currency: "PKR",
          profile_url: "https://example.com/sarah",
          email: "sarah@example.com",
          phone: "03001234567",
          modes: "In-person",
          education: "PhD Clinical Psychology",
          experience: "Senior Psychologist",
          expertise: "Anxiety Disorders",
          about: "Experienced in anxiety treatment",
          fees_raw: "Fee: Rs. 3000",
          emails_all: "sarah@example.com",
          createdAt: new Date(),
          updatedAt: new Date(),
        },
      ];

      prismaMock.therapist.findMany.mockResolvedValue(mockTherapists);

      const result = await caller.therapists.getAll({
        search: "anxiety",
      });

      expect(prismaMock.therapist.findMany).toHaveBeenCalledWith({
        take: 13,
        cursor: undefined,
        where: {
          OR: [
            { name: { contains: "anxiety", mode: "insensitive" } },
            { expertise: { contains: "anxiety", mode: "insensitive" } },
            { education: { contains: "anxiety", mode: "insensitive" } },
            { about: { contains: "anxiety", mode: "insensitive" } },
          ],
        },
        orderBy: { name: "asc" },
      });

      expect(result.therapists).toHaveLength(1);
    });

    it("should handle pagination with cursor", async () => {
      const mockTherapists = Array.from({ length: 13 }, (_, i) => ({
        id: `${i + 1}`,
        name: `Therapist ${i + 1}`,
        gender: "Female",
        city: "Karachi",
        experience_years: 5,
        fee_amount: 3000,
        fee_currency: "PKR",
        profile_url: `https://example.com/therapist${i + 1}`,
        email: `therapist${i + 1}@example.com`,
        phone: "03001234567",
        modes: "In-person",
        education: "PhD",
        experience: "Psychologist",
        expertise: "Counseling",
        about: "Experienced",
        fees_raw: "Fee: Rs. 3000",
        emails_all: `therapist${i + 1}@example.com`,
        createdAt: new Date(),
        updatedAt: new Date(),
      }));

      prismaMock.therapist.findMany.mockResolvedValue(mockTherapists);

      const result = await caller.therapists.getAll({
        limit: 12,
      });

      expect(result.therapists).toHaveLength(12);
      expect(result.nextCursor).toBe("13");
    });

    it('should handle "Other" cities filter', async () => {
      const mockTherapists = [
        {
          id: "1",
          name: "Dr. Unknown",
          gender: "Female",
          city: "Rawalpindi",
          experience_years: 5,
          fee_amount: 3000,
          fee_currency: "PKR",
          profile_url: "https://example.com/unknown",
          email: "unknown@example.com",
          phone: "03001234567",
          modes: "In-person",
          education: "PhD",
          experience: "Psychologist",
          expertise: "Counseling",
          about: "Experienced",
          fees_raw: "Fee: Rs. 3000",
          emails_all: "unknown@example.com",
          createdAt: new Date(),
          updatedAt: new Date(),
        },
      ];

      prismaMock.therapist.findMany.mockResolvedValue(mockTherapists);

      const result = await caller.therapists.getAll({
        cities: ["Other"],
      });

      expect(prismaMock.therapist.findMany).toHaveBeenCalledWith({
        take: 13,
        cursor: undefined,
        where: {
          NOT: {
            city: { in: ["Karachi", "Lahore", "Islamabad"] },
          },
        },
        orderBy: { name: "asc" },
      });

      expect(result.therapists).toHaveLength(1);
      expect(result.therapists[0]?.city).toBe("Rawalpindi");
    });
  });

  describe("getById", () => {
    it("should return a therapist by id", async () => {
      const mockTherapist = {
        id: "1",
        name: "Dr. Sarah Ahmed",
        gender: "Female",
        city: "Karachi",
        experience_years: 10,
        fee_amount: 3000,
        fee_currency: "PKR",
        profile_url: "https://example.com/sarah",
        email: "sarah@example.com",
        phone: "03001234567",
        modes: "In-person; Virtual video-based",
        education: "PhD Clinical Psychology",
        experience: "Senior Psychologist at Mind Wellness Center",
        expertise: "Anxiety Disorders; Depression",
        about: "Experienced clinical psychologist",
        fees_raw: "Fee: Rs. 3000",
        emails_all: "sarah@example.com",
        createdAt: new Date(),
        updatedAt: new Date(),
      };

      prismaMock.therapist.findUnique.mockResolvedValue(mockTherapist);

      const result = await caller.therapists.getById({ id: "1" });

      expect(prismaMock.therapist.findUnique).toHaveBeenCalledWith({
        where: { id: "1" },
      });

      expect(result).toEqual(mockTherapist);
      expect(result?.name).toBe("Dr. Sarah Ahmed");
    });

    it("should return null for non-existent therapist", async () => {
      prismaMock.therapist.findUnique.mockResolvedValue(null);

      const result = await caller.therapists.getById({ id: "non-existent" });

      expect(result).toBeNull();
    });
  });

  describe("getFilterOptions", () => {
    it("should return filter options with counts", async () => {
      // Mock groupBy responses
      const mockCities = [
        { city: "Karachi", _count: { city: 23 } },
        { city: "Lahore", _count: { city: 18 } },
        { city: "Islamabad", _count: { city: 15 } },
        { city: "Rawalpindi", _count: { city: 5 } },
      ];

      const mockGenders = [
        { gender: "Male", _count: { gender: 41 } },
        { gender: "Female", _count: { gender: 38 } },
      ];

      const mockTherapistsWithModes = [
        { modes: "In-person; Virtual video-based" },
        { modes: "Virtual telephonic" },
        { modes: "In-person" },
      ];

      prismaMock.therapist.groupBy
        .mockResolvedValueOnce(mockCities) // For cities
        .mockResolvedValueOnce(mockGenders); // For genders

      prismaMock.therapist.findMany.mockResolvedValue(
        mockTherapistsWithModes as any,
      );

      const result = await caller.therapists.getFilterOptions();

      expect(prismaMock.therapist.groupBy).toHaveBeenCalledTimes(2);
      expect(prismaMock.therapist.findMany).toHaveBeenCalledWith({
        select: { modes: true },
      });

      expect(result.cities).toEqual([
        { name: "Karachi", count: 23 },
        { name: "Lahore", count: 18 },
        { name: "Islamabad", count: 15 },
        { name: "Rawalpindi", count: 5 },
      ]);

      expect(result.genders).toEqual([
        { name: "Male", count: 41 },
        { name: "Female", count: 38 },
      ]);

      expect(result.modes).toContain("In-person");
      expect(result.modes).toContain("Virtual video-based");
      expect(result.modes).toContain("Virtual telephonic");
    });

    it("should handle empty modes data", async () => {
      const mockCities = [{ city: "Karachi", _count: { city: 1 } }];
      const mockGenders = [{ gender: "Male", _count: { gender: 1 } }];
      const mockTherapistsWithModes = [{ modes: null }];

      prismaMock.therapist.groupBy
        .mockResolvedValueOnce(mockCities)
        .mockResolvedValueOnce(mockGenders);

      prismaMock.therapist.findMany.mockResolvedValue(
        mockTherapistsWithModes as any,
      );

      const result = await caller.therapists.getFilterOptions();

      expect(result.modes).toEqual([]);
    });
  });
});

describe("Therapist Router - Edge Cases", () => {
  const createCaller = createCallerFactory();
  let caller: ReturnType<typeof createCaller>;

  beforeEach(() => {
    const ctx = createTestContext();
    caller = createCaller(ctx);
  });

  it("should handle multiple combined filters", async () => {
    const mockTherapists = [
      {
        id: "1",
        name: "Dr. Sarah Ahmed",
        gender: "Female",
        city: "Karachi",
        experience_years: 8,
        fee_amount: 3500,
        fee_currency: "PKR",
        profile_url: "https://example.com/sarah",
        email: "sarah@example.com",
        phone: "03001234567",
        modes: "In-person; Virtual video-based",
        education: "PhD",
        experience: "Senior Psychologist",
        expertise: "Anxiety",
        about: "Experienced",
        fees_raw: "Fee: Rs. 3500",
        emails_all: "sarah@example.com",
        createdAt: new Date(),
        updatedAt: new Date(),
      },
    ];

    prismaMock.therapist.findMany.mockResolvedValue(mockTherapists);

    const result = await caller.therapists.getAll({
      cities: ["Karachi"],
      genders: ["Female"],
      experienceRanges: ["5-10"],
      feeRanges: ["2000-4000"],
      modes: ["In-person"],
      search: "anxiety",
    });

    expect(prismaMock.therapist.findMany).toHaveBeenCalled();
    expect(result.therapists).toHaveLength(1);
  });

  it("should handle therapists with missing optional fields", async () => {
    const mockTherapists = [
      {
        id: "1",
        name: "Dr. Incomplete",
        gender: "Male",
        city: "Lahore",
        experience_years: null,
        fee_amount: null,
        fee_currency: "PKR",
        profile_url: null,
        email: null,
        phone: null,
        modes: null,
        education: null,
        experience: null,
        expertise: null,
        about: null,
        fees_raw: null,
        emails_all: null,
        createdAt: new Date(),
        updatedAt: new Date(),
      },
    ];

    prismaMock.therapist.findMany.mockResolvedValue(mockTherapists);

    const result = await caller.therapists.getAll({});

    expect(result.therapists).toHaveLength(1);
    expect(result.therapists[0]?.experience_years).toBeNull();
    expect(result.therapists[0]?.fee_amount).toBeNull();
  });

  it("should handle empty result set", async () => {
    prismaMock.therapist.findMany.mockResolvedValue([]);

    const result = await caller.therapists.getAll({
      cities: ["NonExistentCity"],
    });

    expect(result.therapists).toHaveLength(0);
    expect(result.nextCursor).toBeUndefined();
  });
});
